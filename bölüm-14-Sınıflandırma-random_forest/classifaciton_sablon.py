# -*- coding: utf-8 -*-
"""classifaciton_sablon.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ifoXpD3peOR7rVIRN9KpMK8hfpsffCOE
"""

# -*- coding: utf-8 -*-
"""rassal_agac_classifier.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1kEZ_svZ2IYtbzBFBkDedXlOj3BShKnej
"""

#!/usr/bin/env python3

#1.kutuphaneler eklenir
from cgi import test
import imp
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

#veriler alindi
#2.veri onisleme
#2.1 veri yukleme
veriler = pd.read_csv("veriler.csv")
#test

x = veriler.iloc[:,1:4].values #bagimsiz degisken
y = veriler.iloc[:,4:].values #bagimli degisken


#verileri egitim ve test icin bol ve verilerin olceklenmesi
from sklearn.model_selection import train_test_split #belli bir yere kadar deneme belli bir yerden sonra test olacak
#x bağımsız, y bapımlı değişken
x_train, x_test, y_train, y_test = train_test_split(x,y, test_size=0.33, random_state=0)

#verileri olcekle
from sklearn.preprocessing import StandardScaler
sc=StandardScaler()
X_train = sc.fit_transform(x_train) #egit ve uygula
X_test = sc.transform(x_test) #ogrenmeden uygulama

from sklearn.linear_model import LogisticRegression
logr = LogisticRegression(random_state=0)
logr.fit(X_train, y_train)

#tahmin
y_pred = logr.predict(X_test)#tahmin et test verisi ile
#print(x_test)
#print(y_pred)

#print(y_test)#gercek bilgi

from sklearn.metrics import confusion_matrix
cm = confusion_matrix(y_test, y_pred)
#print(cm)


from sklearn.neighbors import KNeighborsClassifier
knn = KNeighborsClassifier(n_neighbors=5, metric='minkowski') #n düşerse ufak örneklerde sınıflandır, komşu sayısı azalır
knn.fit(X_train,y_train)
y_pred = knn.predict(X_test)

cm = confusion_matrix(y_test,y_pred)
#print(cm)


from sklearn.svm import SVC
#svc = SVC(kernel="linear")
svc = SVC(kernel="poly") #kernelleri degistirr daha iyi sonuc elde edebilirsin
svc.fit(X_train, y_train)
y_pred = svc.predict(X_test)
cm = confusion_matrix(y_test,y_pred)
#print(cm)

from sklearn.naive_bayes import GaussianNB
gnb = GaussianNB()
gnb.fit(X_train,y_train)
y_pred = gnb.predict(X_test)

cm = confusion_matrix(y_test,y_pred)
#print(cm)

from sklearn.tree import DecisionTreeClassifier
dtc = DecisionTreeClassifier(criterion='entropy')

dtc.fit(X_train, y_train)
y_pred = dtc.predict(X_test)
cm = confusion_matrix(y_test,y_pred)
#print(cm)

from sklearn.ensemble import RandomForestClassifier
rfc = RandomForestClassifier(n_estimators=10, criterion = 'entropy')

rfc.fit(X_train,y_train)
y_pred = rfc.predict(X_test)
y_proba = rfc.predict_proba(X_test) #tahmin olasılıkları
cm = confusion_matrix(y_test,y_pred)
#print(cm)
print(y_proba[:,0])

from sklearn import metrics
fpr, tpr, thold = metrics.roc_curve(y_test,y_proba[:,0],pos_label='e')
print(fpr)
print(tpr)